/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IExecutionPermissions_VariablesContract
  extends Truffle.Contract<IExecutionPermissions_VariablesInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IExecutionPermissions_VariablesInstance>;
}

type AllEvents = never;

export interface IExecutionPermissions_VariablesInstance
  extends Truffle.ContractInstance {
  /**
   * See {IExecutionPermissions}
   * Check execution permissions of referenced contract function for given caller
   * @param caller Original `msg.sender` of targeted function
   * @param ref Contract address with `target` function
   * @param target Function ID to check
   */
  permissions(
    ref: string,
    target: string,
    caller: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * See {IExecutionPermissions}
   * Check registration status of referenced contract
   * @param ref Contract address to check registration state
   */
  registered(
    ref: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * See {IExecutionPermissions}
   * Obtain current owner address
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IExecutionPermissions}
   * Obtain new owner nominated address
   */
  nominated_owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    /**
     * See {IExecutionPermissions}
     * Check execution permissions of referenced contract function for given caller
     * @param caller Original `msg.sender` of targeted function
     * @param ref Contract address with `target` function
     * @param target Function ID to check
     */
    permissions(
      ref: string,
      target: string,
      caller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {IExecutionPermissions}
     * Check registration status of referenced contract
     * @param ref Contract address to check registration state
     */
    registered(
      ref: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {IExecutionPermissions}
     * Obtain current owner address
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IExecutionPermissions}
     * Obtain new owner nominated address
     */
    nominated_owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
