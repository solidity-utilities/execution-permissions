/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ExecutionPermissionsContract
  extends Truffle.Contract<ExecutionPermissionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ExecutionPermissionsInstance>;
}

export interface OwnerNominated {
  name: "OwnerNominated";
  args: {
    from: string;
    to: string;
    0: string;
    1: string;
  };
}

export interface OwnershipClaimed {
  name: "OwnershipClaimed";
  args: {
    from: string;
    to: string;
    0: string;
    1: string;
  };
}

type AllEvents = OwnerNominated | OwnershipClaimed;

export interface ExecutionPermissionsInstance extends Truffle.ContractInstance {
  /**
   * Store address of possible new owner of this contract instance
   */
  nominated_owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Store current owner of this contract instance
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Map contract to function target to caller to permission
   */
  permissions(
    arg0: string,
    arg1: string,
    arg2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Map contract to registered state
   */
  registered(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setBatchPermission: {
    (
      entries: { target: string; caller: string; state: boolean }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      entries: { target: string; caller: string; state: boolean }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      entries: { target: string; caller: string; state: boolean }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      entries: { target: string; caller: string; state: boolean }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IExecutionPermissions_Functions-setTargetPermission}
   * Assign single function caller permission state
   * @param caller Original `msg.sender` of targeted function
   * @param state Value to assign for function caller interaction
   * @param target Function ID to set caller permission
   */
  setTargetPermission: {
    (
      target: string,
      caller: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      caller: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      caller: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      caller: string,
      state: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IExecutionPermissions_Functions-tip}
   * Show some support developers of this contract
   */
  tip: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * See {IExecutionPermissions_Functions-withdraw}
   * Allow owner of `ExecutionPermissions` to receive tips
   * @param amount Measured in Wei
   * @param to Where to send Ethereum
   */
  withdraw: {
    (
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IExecutionPermissions_Functions-nominateOwner}See {IExecutionPermissions_Events-OwnerNominated}
   * Initiate transfer of contract ownership
   * @param newOwner Account that may claim ownership of contract
   */
  nominateOwner: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IExecutionPermissions_Functions-claimOwnership}See {IExecutionPermissions_Events-OwnershipClaimed}
   * Accept transfer of contract ownership
   */
  claimOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    /**
     * Store address of possible new owner of this contract instance
     */
    nominated_owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Store current owner of this contract instance
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Map contract to function target to caller to permission
     */
    permissions(
      arg0: string,
      arg1: string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Map contract to registered state
     */
    registered(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    setBatchPermission: {
      (
        entries: { target: string; caller: string; state: boolean }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        entries: { target: string; caller: string; state: boolean }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        entries: { target: string; caller: string; state: boolean }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        entries: { target: string; caller: string; state: boolean }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-setTargetPermission}
     * Assign single function caller permission state
     * @param caller Original `msg.sender` of targeted function
     * @param state Value to assign for function caller interaction
     * @param target Function ID to set caller permission
     */
    setTargetPermission: {
      (
        target: string,
        caller: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        caller: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        caller: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        caller: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-tip}
     * Show some support developers of this contract
     */
    tip: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-withdraw}
     * Allow owner of `ExecutionPermissions` to receive tips
     * @param amount Measured in Wei
     * @param to Where to send Ethereum
     */
    withdraw: {
      (
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-nominateOwner}See {IExecutionPermissions_Events-OwnerNominated}
     * Initiate transfer of contract ownership
     * @param newOwner Account that may claim ownership of contract
     */
    nominateOwner: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-claimOwnership}See {IExecutionPermissions_Events-OwnershipClaimed}
     * Accept transfer of contract ownership
     */
    claimOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-isPermitted}
     * Check execution permissions of target function for given caller
     * @param caller Original `msg.sender` of targeted function
     * @param target Function signature to check
     */
    "isPermitted(string,address)"(
      target: string,
      caller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {IExecutionPermissions_Functions-isPermitted}
     * Check execution permissions of target function for given caller
     * @param caller Original `msg.sender` of targeted function
     * @param target Function ID to check
     */
    "isPermitted(bytes4,address)"(
      target: string,
      caller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * See {IExecutionPermissions_Functions-setRegistered}
     * Set registration state for calling contract instance
     * @param state Set `true` for registered and `false` for unregistered (default)
     */
    "setRegistered(bool)": {
      (state: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IExecutionPermissions_Functions-setRegistered}
     * Set registration state for referenced contract instance
     * @param ref Contract instance owned by `msg.sender`
     * @param state Set `true` for registered and `false` for unregistered (default)
     */
    "setRegistered(address,bool)": {
      (
        ref: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ref: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        ref: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ref: string,
        state: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
